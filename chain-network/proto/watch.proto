syntax = "proto3";

import "types.proto";

package iohk.chain.watch;

message BlockSubscriptionRequest {}

message TipSubscriptionRequest {}

message MempoolSubscriptionRequest {}

message SyncMultiverseRequest {
  // send blocks with this chain_length or greater
  uint32 from_length = 1;
}

service Watch {
  // get a stream of blocks succesfully processed by the node, this means they
  // are already validated.
  // the parent of a block will always be streamed before the block itself.
  rpc BlockSubscription(BlockSubscriptionRequest) returns (stream types.Block);

  // get tip updates
  rpc TipSubscription(TipSubscriptionRequest) returns (stream types.Header);

  // fetch all blocks from the given initial chainlength to the tip, from all
  // possible branches and in increasing order
  rpc SyncMultiverse(SyncMultiverseRequest) returns (stream types.Block);
}
