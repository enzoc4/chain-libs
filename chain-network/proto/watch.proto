syntax = "proto3";

package iohk.chain.watch;

message Block { bytes content = 1; }

message BlockSubscriptionRequest {}

message TipSubscriptionRequest {}

message MempoolSubscriptionRequest {}

message SyncMultiverseRequest {
  // send blocks with this chain_length or greater
  uint32 from = 1;
}

message BlockId { bytes content = 1; }

message MempoolEvent {
  bytes fragment_id = 1;
  oneof event {
    MempoolFragmentInserted inserted = 2;
    MempoolFragmentRejected rejected = 3;
    MempoolFragmentInABlock in_a_block = 4;
  };
}

message MempoolFragmentInserted {}

message MempoolFragmentRejected { string reason = 1; }

message MempoolFragmentInABlock { BlockId block = 1; }

service Watch {
  // get a stream of blocks succesfully processed by the node, this means they
  // are already validated.
  // the parent of a block will always be streamed before the block itself.
  rpc BlockSubscription(BlockSubscriptionRequest) returns (stream Block);

  // get tip updates
  rpc TipSubscription(TipSubscriptionRequest) returns (stream BlockId);

  rpc MempoolSubscription(MempoolSubscriptionRequest)
      returns (stream MempoolEvent);

  // fetch all blocks from the given initial chainlength to the tip, from all
  // possible branches and in increasing order
  rpc SyncMultiverse(SyncMultiverseRequest) returns (stream Block);
}